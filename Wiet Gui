local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local SilverAccess = {}
SilverAccess.__index = SilverAccess

SilverAccess.Colors = {
    Background = Color3.fromRGB(30, 30, 35),
    Primary = Color3.fromRGB(192, 192, 192),
    Secondary = Color3.fromRGB(60, 60, 65),
    Text = Color3.fromRGB(255, 255, 255),
    TextDark = Color3.fromRGB(30, 30, 35),
    Accent = Color3.fromRGB(120, 120, 125),
    Success = Color3.fromRGB(100, 200, 100),
    Error = Color3.fromRGB(200, 100, 100)
}

function SilverAccess.new(config)
    local self = setmetatable({}, SilverAccess)
    
    self.Version = "1.0.0"
    self.Player = Players.LocalPlayer
    self.AdminIDs = config and config.AdminIDs or {}
    self.Keys = {}
    self.Features = {}
    self.IsAdmin = table.find(self.AdminIDs, self.Player.UserId) ~= nil
    self.GUI = nil
    self.MainFrame = nil
    self.ContentFrame = nil
    self.KeysListScroll = nil
    
    self:LoadKeys()
    
    return self
end

function SilverAccess:LoadKeys()
    local success, result = pcall(function()
        if self.Player:FindFirstChild("SilverKeys") then
            return HttpService:JSONDecode(self.Player.SilverKeys.Value)
        end
        return {}
    end)
    
    if success then
        self.Keys = result
    else
        self.Keys = {}
    end
end

function SilverAccess:SaveKeys()
    local success, result = pcall(function()
        if not self.Player:FindFirstChild("SilverKeys") then
            local keysValue = Instance.new("StringValue")
            keysValue.Name = "SilverKeys"
            keysValue.Parent = self.Player
        end
        self.Player.SilverKeys.Value = HttpService:JSONEncode(self.Keys)
    end)
end

function SilverAccess:HasAccess(userId)
    userId = userId or self.Player.UserId
    
    if table.find(self.AdminIDs, userId) then
        return true, "Admin"
    end
    
    for _, key in pairs(self.Keys) do
        if key.UserId == userId then
            if key.Duration == "Infinite" or os.time() < key.ExpiryTime then
                return true, key.Duration == "Infinite" and "Infinite" or key.ExpiryTime - os.time()
            end
        end
    end
    
    return false
end

function SilverAccess:AddKey(userId, duration)
    if not self.IsAdmin then return false end
    
    local expiryTime = duration == "Infinite" and "Infinite" or os.time() + duration
    
    for i, key in pairs(self.Keys) do
        if key.UserId == userId then
            self.Keys[i] = {
                UserId = userId,
                Duration = duration,
                ExpiryTime = expiryTime,
                IssuedBy = self.Player.UserId,
                IssuedAt = os.time()
            }
            self:SaveKeys()
            return true
        end
    end
    
    table.insert(self.Keys, {
        UserId = userId,
        Duration = duration,
        ExpiryTime = expiryTime,
        IssuedBy = self.Player.UserId,
        IssuedAt = os.time()
    })
    
    self:SaveKeys()
    return true
end

function SilverAccess:RemoveKey(userId)
    if not self.IsAdmin then return false end
    
    for i, key in pairs(self.Keys) do
        if key.UserId == userId then
            table.remove(self.Keys, i)
            self:SaveKeys()
            return true
        end
    end
    
    return false
end

function SilverAccess:FormatTime(seconds)
    if seconds <= 0 then
        return "Expired"
    end
    
    local days = math.floor(seconds / 86400)
    seconds = seconds % 86400
    local hours = math.floor(seconds / 3600)
    seconds = seconds % 3600
    local minutes = math.floor(seconds / 60)
    seconds = seconds % 60
    
    if days > 0 then
        return string.format("%dd %dh %dm", days, hours, minutes)
    elseif hours > 0 then
        return string.format("%dh %dm %ds", hours, minutes, seconds)
    else
        return string.format("%dm %ds", minutes, seconds)
    end
end

function SilverAccess:CreateGUI()
    if self.GUI then
        self.MainFrame.Visible = true
        return self.GUI
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "SilverAccessGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = self.Player.PlayerGui
    self.GUI = screenGui
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 500, 0, 350)
    mainFrame.Position = UDim2.new(0.5, -250, 0.5, -175)
    mainFrame.BackgroundColor3 = self.Colors.Background
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    self.MainFrame = mainFrame
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = mainFrame
    
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.BackgroundColor3 = self.Colors.Primary
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 8)
    titleCorner.Parent = titleBar
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -20, 1, 0)
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.TextColor3 = self.Colors.TextDark
    titleLabel.TextSize = 18
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Text = "Silver Access"
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar
    
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "Close"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -35, 0, 5)
    closeButton.BackgroundColor3 = self.Colors.Background
    closeButton.TextColor3 = self.Colors.Text
    closeButton.Text = "X"
    closeButton.TextSize = 16
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = titleBar
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 6)
    closeCorner.Parent = closeButton
    
    local tabsFrame = Instance.new("Frame")
    tabsFrame.Name = "Tabs"
    tabsFrame.Size = UDim2.new(0, 120, 1, -50)
    tabsFrame.Position = UDim2.new(0, 10, 0, 45)
    tabsFrame.BackgroundColor3 = self.Colors.Secondary
    tabsFrame.BorderSizePixel = 0
    tabsFrame.Parent = mainFrame
    
    local tabsCorner = Instance.new("UICorner")
    tabsCorner.CornerRadius = UDim.new(0, 6)
    tabsCorner.Parent = tabsFrame
    
    local tabsList = Instance.new("UIListLayout")
    tabsList.Padding = UDim.new(0, 5)
    tabsList.HorizontalAlignment = Enum.HorizontalAlignment.Center
    tabsList.SortOrder = Enum.SortOrder.LayoutOrder
    tabsList.Parent = tabsFrame
    
    local tabsPadding = Instance.new("UIPadding")
    tabsPadding.PaddingTop = UDim.new(0, 10)
    tabsPadding.Parent = tabsFrame
    
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, -150, 1, -50)
    contentFrame.Position = UDim2.new(0, 140, 0, 45)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame
    self.ContentFrame = contentFrame
    
    self:MakeDraggable(titleBar, mainFrame)
    
    closeButton.MouseButton1Click:Connect(function()
        mainFrame.Visible = false
    end)
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0, 120, 0, 30)
    toggleButton.Position = UDim2.new(0, 10, 0, 10)
    toggleButton.BackgroundColor3 = self.Colors.Primary
    toggleButton.TextColor3 = self.Colors.TextDark
    toggleButton.Text = "Silver Access"
    toggleButton.TextSize = 14
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.Parent = screenGui
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 6)
    toggleCorner.Parent = toggleButton
    
    toggleButton.MouseButton1Click:Connect(function()
        mainFrame.Visible = not mainFrame.Visible
    end)
    
    self:CreateTabs()
    
    return self.GUI
end

function SilverAccess:CreateTabs()
    local tabs = {"Features", "Settings"}
    
    if self.IsAdmin then
        table.insert(tabs, 2, "Admin")
    end
    
    for i, tabName in ipairs(tabs) do
        local tabButton = Instance.new("TextButton")
        tabButton.Name = tabName .. "Tab"
        tabButton.Size = UDim2.new(0, 100, 0, 30)
        tabButton.BackgroundColor3 = i == 1 and self.Colors.Primary or self.Colors.Secondary
        tabButton.TextColor3 = i == 1 and self.Colors.TextDark or self.Colors.Text
        tabButton.Text = tabName
        tabButton.TextSize = 14
        tabButton.Font = Enum.Font.GothamBold
        tabButton.LayoutOrder = i
        tabButton.Parent = self.MainFrame.Tabs
        
        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0, 6)
        tabCorner.Parent = tabButton
        
        tabButton.MouseButton1Click:Connect(function()
            self:SwitchTab(tabName)
        end)
        
        local contentFrame = Instance.new("Frame")
        contentFrame.Name = tabName .. "Content"
        contentFrame.Size = UDim2.new(1, 0, 1, 0)
        contentFrame.BackgroundTransparency = 1
        contentFrame.Visible = i == 1
        contentFrame.Parent = self.ContentFrame
        
        local scrollFrame = Instance.new("ScrollingFrame")
        scrollFrame.Name = tabName .. "Scroll"
        scrollFrame.Size = UDim2.new(1, -10, 1, 0)
        scrollFrame.BackgroundTransparency = 1
        scrollFrame.BorderSizePixel = 0
        scrollFrame.ScrollBarThickness = 4
        scrollFrame.ScrollBarImageColor3 = self.Colors.Primary
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
        scrollFrame.Parent = contentFrame
        
        local listLayout = Instance.new("UIListLayout")
        listLayout.Padding = UDim.new(0, 10)
        listLayout.SortOrder = Enum.SortOrder.LayoutOrder
        listLayout.Parent = scrollFrame
        
        local padding = Instance.new("UIPadding")
        padding.PaddingTop = UDim.new(0, 10)
        padding.PaddingLeft = UDim.new(0, 10)
        padding.PaddingRight = UDim.new(0, 10)
        padding.PaddingBottom = UDim.new(0, 10)
        padding.Parent = scrollFrame
    end
    
    if self.IsAdmin then
        self:SetupAdminTab()
    end
    
    self:SetupFeaturesTab()
    
    self:SetupSettingsTab()
end

function SilverAccess:SwitchTab(tabName)
    for _, tab in pairs(self.MainFrame.Tabs:GetChildren()) do
        if tab:IsA("TextButton") then
            tab.BackgroundColor3 = tab.Name == tabName.."Tab" and self.Colors.Primary or self.Colors.Secondary
            tab.TextColor3 = tab.Name == tabName.."Tab" and self.Colors.TextDark or self.Colors.Text
        end
    end
    
    for _, content in pairs(self.ContentFrame:GetChildren()) do
        if content:IsA("Frame") then
            content.Visible = content.Name == tabName.."Content"
        end
    end
end

function SilverAccess:SetupFeaturesTab()
    local featuresScroll = self.ContentFrame.FeaturesContent.FeaturesScroll
    
    local hasAccess, accessInfo = self:HasAccess()
    
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "StatusLabel"
    statusLabel.Size = UDim2.new(1, 0, 0, 30)
    statusLabel.BackgroundTransparency = 1
    statusLabel.TextColor3 = hasAccess and self.Colors.Success or self.Colors.Error
    statusLabel.Text = hasAccess and "You have Silver Access" or "You don't have Silver Access"
    statusLabel.TextSize = 18
    statusLabel.Font = Enum.Font.Got
        statusLabel.Font = Enum.Font.GothamBold
    statusLabel.Parent = featuresScroll
    
    if hasAccess and accessInfo ~= "Admin" and accessInfo ~= "Infinite" then
        local timeLabel = Instance.new("TextLabel")
        timeLabel.Name = "TimeLabel"
        timeLabel.Size = UDim2.new(1, 0, 0, 20)
        timeLabel.BackgroundTransparency = 1
        timeLabel.TextColor3 = self.Colors.Text
        timeLabel.Text = "Time remaining: " .. self:FormatTime(accessInfo)
        timeLabel.TextSize = 14
        timeLabel.Font = Enum.Font.Gotham
        timeLabel.Parent = featuresScroll
        
        RunService.Heartbeat:Connect(function()
            local _, newAccessInfo = self:HasAccess()
            if type(newAccessInfo) == "number" then
                timeLabel.Text = "Time remaining: " .. self:FormatTime(newAccessInfo)
            end
        end)
    end
    
    local featuresContainer = Instance.new("Frame")
    featuresContainer.Name = "FeaturesContainer"
    featuresContainer.Size = UDim2.new(1, 0, 0, 0)
    featuresContainer.BackgroundTransparency = 1
    featuresContainer.AutomaticSize = Enum.AutomaticSize.Y
    featuresContainer.Parent = featuresScroll
    
    local featuresLayout = Instance.new("UIListLayout")
    featuresLayout.Padding = UDim.new(0, 10)
    featuresLayout.SortOrder = Enum.SortOrder.LayoutOrder
    featuresLayout.Parent = featuresContainer
end

function SilverAccess:SetupAdminTab()
    local adminScroll = self.ContentFrame.AdminContent.AdminScroll
    
    local keySection = self:CreateSection(adminScroll, "Key Management")
    
    local playerInput = self:CreateTextBox(keySection, "Player Username or ID", "", function(text)
        self.AdminPlayerInput = text
    end)
    
    local durationDropdown = self:CreateDropdown(keySection, "Duration", {"1 Hour", "1 Day", "1 Week", "1 Month", "Infinite"}, function(selected)
        self.AdminDurationSelected = selected
    end)
    
    local grantButton = self:CreateButton(keySection, "Grant Access", function()
        local inputText = self.AdminPlayerInput
        if not inputText or inputText == "" then return end
        
        local targetPlayer
        
        targetPlayer = Players:FindFirstChild(inputText)
        
        if not targetPlayer and tonumber(inputText) then
            for _, player in pairs(Players:GetPlayers()) do
                if player.UserId == tonumber(inputText) then
                    targetPlayer = player
                    break
                end
            end
        end
        
        if not targetPlayer then
            self:ShowNotification("Player not found", self.Colors.Error)
            return
        end
        
        local duration
        if self.AdminDurationSelected == "1 Hour" then
            duration = 3600
        elseif self.AdminDurationSelected == "1 Day" then
            duration = 86400
        elseif self.AdminDurationSelected == "1 Week" then
            duration = 604800
        elseif self.AdminDurationSelected == "1 Month" then
            duration = 2592000
        else
            duration = "Infinite"
        end
        
        if self:AddKey(targetPlayer.UserId, duration) then
            self:ShowNotification("Access granted to " .. targetPlayer.Name, self.Colors.Success)
            self:UpdateKeysList()
        else
            self:ShowNotification("Failed to grant access", self.Colors.Error)
        end
    end)
    
    local keysListSection = self:CreateSection(adminScroll, "Active Keys")
    
    local keysListFrame = Instance.new("Frame")
    keysListFrame.Name = "KeysListFrame"
    keysListFrame.Size = UDim2.new(1, 0, 0, 200)
    keysListFrame.BackgroundColor3 = self.Colors.Secondary
    keysListFrame.BorderSizePixel = 0
    keysListFrame.Parent = keysListSection
    
    local keysListCorner = Instance.new("UICorner")
    keysListCorner.CornerRadius = UDim.new(0, 6)
    keysListCorner.Parent = keysListFrame
    
    local keysListScroll = Instance.new("ScrollingFrame")
    keysListScroll.Name = "KeysListScroll"
    keysListScroll.Size = UDim2.new(1, -10, 1, -10)
    keysListScroll.Position = UDim2.new(0, 5, 0, 5)
    keysListScroll.BackgroundTransparency = 1
    keysListScroll.BorderSizePixel = 0
    keysListScroll.ScrollBarThickness = 4
    keysListScroll.ScrollBarImageColor3 = self.Colors.Primary
    keysListScroll.CanvasSize = UDim2.new(0, 0, 0, 0)
    keysListScroll.AutomaticCanvasSize = Enum.AutomaticSize.Y
    keysListScroll.Parent = keysListFrame
    
    local keysListLayout = Instance.new("UIListLayout")
    keysListLayout.Padding = UDim.new(0, 5)
    keysListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    keysListLayout.Parent = keysListScroll
    
    self.KeysListScroll = keysListScroll
    self:UpdateKeysList()
    
    local refreshButton = self:CreateButton(keysListSection, "Refresh List", function()
        self:UpdateKeysList()
    end)
end

function SilverAccess:UpdateKeysList()
    if not self.KeysListScroll then return end
    
    for _, child in pairs(self.KeysListScroll:GetChildren()) do
        if child:IsA("Frame") then
            child:Destroy()
        end
    end
    
    for i, key in pairs(self.Keys) do
        local keyFrame = Instance.new("Frame")
        keyFrame.Name = "KeyEntry_" .. i
        keyFrame.Size = UDim2.new(1, 0, 0, 60)
        keyFrame.BackgroundColor3 = self.Colors.Background
        keyFrame.BorderSizePixel = 0
        keyFrame.LayoutOrder = i
        keyFrame.Parent = self.KeysListScroll
        
        local keyCorner = Instance.new("UICorner")
        keyCorner.CornerRadius = UDim.new(0, 4)
        keyCorner.Parent = keyFrame
        
        local userIdLabel = Instance.new("TextLabel")
        userIdLabel.Name = "UserIdLabel"
        userIdLabel.Size = UDim2.new(0, 100, 0, 20)
        userIdLabel.Position = UDim2.new(0, 10, 0, 5)
        userIdLabel.BackgroundTransparency = 1
        userIdLabel.TextColor3 = self.Colors.Text
        userIdLabel.TextSize = 14
        userIdLabel.Font = Enum.Font.Gotham
        userIdLabel.Text = "ID: " .. key.UserId
        userIdLabel.TextXAlignment = Enum.TextXAlignment.Left
        userIdLabel.Parent = keyFrame
        
        local usernameLabel = Instance.new("TextLabel")
        usernameLabel.Name = "UsernameLabel"
        usernameLabel.Size = UDim2.new(0, 150, 0, 20)
        usernameLabel.Position = UDim2.new(0, 120, 0, 5)
        usernameLabel.BackgroundTransparency = 1
        usernameLabel.TextColor3 = self.Colors.Text
        usernameLabel.TextSize = 14
        usernameLabel.Font = Enum.Font.Gotham
        usernameLabel.Text = "Loading..."
        usernameLabel.TextXAlignment = Enum.TextXAlignment.Left
        usernameLabel.Parent = keyFrame
        
        local durationLabel = Instance.new("TextLabel")
        durationLabel.Name = "DurationLabel"
        durationLabel.Size = UDim2.new(0, 200, 0, 20)
        durationLabel.Position = UDim2.new(0, 10, 0, 25)
        durationLabel.BackgroundTransparency = 1
        durationLabel.TextColor3 = self.Colors.Text
        durationLabel.TextSize = 14
        durationLabel.Font = Enum.Font.Gotham
        
        if key.Duration == "Infinite" then
            durationLabel.Text = "Duration: Infinite"
        else
            local timeLeft = key.ExpiryTime - os.time()
            durationLabel.Text = "Time left: " .. self:FormatTime(timeLeft)
        end
        
        durationLabel.TextXAlignment = Enum.TextXAlignment.Left
        durationLabel.Parent = keyFrame
        
        local removeButton = Instance.new("TextButton")
        removeButton.Name = "RemoveButton"
        removeButton.Size = UDim2.new(0, 80, 0, 25)
        removeButton.Position = UDim2.new(1, -90, 0, 5)
        removeButton.BackgroundColor3 = self.Colors.Error
        removeButton.TextColor3 = self.Colors.Text
        removeButton.Text = "Remove"
        removeButton.TextSize = 14
        removeButton.Font = Enum.Font.GothamBold
        removeButton.Parent = keyFrame
        
        local removeCorner = Instance.new("UICorner")
        removeCorner.CornerRadius = UDim.new(0, 4)
        removeCorner.Parent = removeButton
        
        removeButton.MouseButton1Click:Connect(function()
            if self:RemoveKey(key.UserId) then
                self:ShowNotification("Access removed", self.Colors.Success)
                self:UpdateKeysList()
            else
                self:ShowNotification("Failed to remove access", self.Colors.Error)
            end
        end)

        coroutine.wrap(function()
            local success, result = pcall(function()
                local playerInfo = Players:GetNameFromUserIdAsync(key.UserId)
                return playerInfo
            end)
            
            if success and result then
                usernameLabel.Text = "User: " .. result
            else
                usernameLabel.Text = "User: Unknown"
            end
        end)()
    end
    
    if #self.Keys == 0 then
        local noKeysLabel = Instance.new("TextLabel")
        noKeysLabel.Name = "NoKeysLabel"
        noKeysLabel.Size = UDim2.new(1, -20, 0, 30)
        noKeysLabel.BackgroundTransparency = 1
        noKeysLabel.TextColor3 = self.Colors.Text
        noKeysLabel.TextSize = 14
        noKeysLabel.Font = Enum.Font.Gotham
        noKeysLabel.Text = "No active keys"
        noKeysLabel.Parent = self.KeysListScroll
    end
end

function SilverAccess:SetupSettingsTab()
    local settingsScroll = self.ContentFrame.SettingsContent.SettingsScroll
    
    local infoSection = self:CreateSection(settingsScroll, "Information")
    
    local versionLabel = self:CreateLabel(infoSection, "Version: " .. self.Version)
    
    local creditsLabel = self:CreateLabel(infoSection, "Created by: Silver Access Team")
    
    local settingsSection = self:CreateSection(settingsScroll, "Settings")
    
    local destroyButton = self:CreateButton(settingsSection, "Destroy GUI", function()
        if self.GUI then
            self.GUI:Destroy()
            self.GUI = nil
            self.MainFrame = nil
            self.ContentFrame = nil
            self.KeysListScroll = nil
        end
    end)
end

function SilverAccess:CreateSection(parent, name)
    local section = Instance.new("Frame")
    section.Name = name .. "Section"
    section.Size = UDim2.new(1, 0, 0, 0)
    section.BackgroundTransparency = 1
    section.AutomaticSize = Enum.AutomaticSize.Y
    section.LayoutOrder = #parent:GetChildren()
    section.Parent = parent
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Name = "Title"
    sectionTitle.Size = UDim2.new(1, 0, 0, 25)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.TextColor3 = self.Colors.Primary
    sectionTitle.TextSize = 16
    sectionTitle.Font = Enum.Font.GothamBold
    sectionTitle.Text = name
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = section
    
    local sectionContent = Instance.new("Frame")
    sectionContent.Name = "Content"
    sectionContent.Size = UDim2.new(1, 0, 0, 0)
    sectionContent.Position = UDim2.new(0, 0, 0, 25)
    sectionContent.BackgroundTransparency = 1
    sectionContent.AutomaticSize = Enum.AutomaticSize.Y
    sectionContent.Parent = section
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.Padding = UDim.new(0, 8)
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Parent = sectionContent
    
    return sectionContent
end

function SilverAccess:CreateButton(parent, text, callback)
    local button = Instance.new("TextButton")
    button.Name = text .. "Button"
    button.Size = UDim2.new(1, 0, 0, 35)
    button.BackgroundColor3 = self.Colors.Primary
    button.TextColor3 = self.Colors.TextDark
    button.Text = text
    button.TextSize = 14
    button.Font = Enum.Font.GothamBold
    button.LayoutOrder = #parent:GetChildren()
    button.Parent = parent
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 6)
    buttonCorner.Parent = button
    
    button.MouseButton1Click:Connect(function()
        callback()
    end)
    
    return button
end

function SilverAccess:CreateToggle(parent, text, default, callback)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = text .. "Toggle"
    toggleFrame.Size = UDim2.new(1, 0, 0, 35)
    toggleFrame.BackgroundTransparency = 1
    toggleFrame.LayoutOrder = #parent:GetChildren()
        toggleFrame.Parent = parent
    
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Name = "Label"
    toggleLabel.Size = UDim2.new(1, -60, 1, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.TextColor3 = self.Colors.Text
    toggleLabel.TextSize = 14
    toggleLabel.Font = Enum.Font.Gotham
    toggleLabel.Text = text
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggleFrame
    
    local toggleButton = Instance.new("Frame")
    toggleButton.Name = "Button"
    toggleButton.Size = UDim2.new(0, 40, 0, 20)
    toggleButton.Position = UDim2.new(1, -45, 0.5, -10)
    toggleButton.BackgroundColor3 = default and self.Colors.Primary or self.Colors.Secondary
    toggleButton.Parent = toggleFrame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(1, 0)
    toggleCorner.Parent = toggleButton
    
    local toggleCircle = Instance.new("Frame")
    toggleCircle.Name = "Circle"
    toggleCircle.Size = UDim2.new(0, 16, 0, 16)
    toggleCircle.Position = UDim2.new(default and 0.6 or 0.1, 0, 0.5, -8)
    toggleCircle.BackgroundColor3 = self.Colors.Text
    toggleCircle.Parent = toggleButton
    
    local circleCorner = Instance.new("UICorner")
    circleCorner.CornerRadius = UDim.new(1, 0)
    circleCorner.Parent = toggleCircle
    
    local toggleClick = Instance.new("TextButton")
    toggleClick.Name = "ClickDetector"
    toggleClick.Size = UDim2.new(1, 0, 1, 0)
    toggleClick.BackgroundTransparency = 1
    toggleClick.Text = ""
    toggleClick.Parent = toggleFrame
    
    local toggled = default
    
    toggleClick.MouseButton1Click:Connect(function()
        toggled = not toggled
        
        local targetPosition = toggled and UDim2.new(0.6, 0, 0.5, -8) or UDim2.new(0.1, 0, 0.5, -8)
        local targetColor = toggled and self.Colors.Primary or self.Colors.Secondary
        
        TweenService:Create(toggleCircle, TweenInfo.new(0.2), {Position = targetPosition}):Play()
        TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = targetColor}):Play()
        
        callback(toggled)
    end)
    
    local toggle = {
        Frame = toggleFrame,
        Value = default,
        SetValue = function(self, value)
            toggled = value
            
            local targetPosition = toggled and UDim2.new(0.6, 0, 0.5, -8) or UDim2.new(0.1, 0, 0.5, -8)
            local targetColor = toggled and self.Colors.Primary or self.Colors.Secondary
            
            toggleCircle.Position = targetPosition
            toggleButton.BackgroundColor3 = targetColor
            
            callback(toggled)
        end
    }
    
    return toggle
end

function SilverAccess:CreateSlider(parent, text, min, max, default, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = text .. "Slider"
    sliderFrame.Size = UDim2.new(1, 0, 0, 50)
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.LayoutOrder = #parent:GetChildren()
    sliderFrame.Parent = parent
    
    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Name = "Label"
    sliderLabel.Size = UDim2.new(1, 0, 0, 20)
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.TextColor3 = self.Colors.Text
    sliderLabel.TextSize = 14
    sliderLabel.Font = Enum.Font.Gotham
    sliderLabel.Text = text .. ": " .. default
    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    sliderLabel.Parent = sliderFrame
    
    local sliderBack = Instance.new("Frame")
    sliderBack.Name = "Background"
    sliderBack.Size = UDim2.new(1, 0, 0, 10)
    sliderBack.Position = UDim2.new(0, 0, 0, 30)
    sliderBack.BackgroundColor3 = self.Colors.Secondary
    sliderBack.Parent = sliderFrame
    
    local sliderBackCorner = Instance.new("UICorner")
    sliderBackCorner.CornerRadius = UDim.new(1, 0)
    sliderBackCorner.Parent = sliderBack
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "Fill"
    sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    sliderFill.BackgroundColor3 = self.Colors.Primary
    sliderFill.Parent = sliderBack
    
    local sliderFillCorner = Instance.new("UICorner")
    sliderFillCorner.CornerRadius = UDim.new(1, 0)
    sliderFillCorner.Parent = sliderFill
    
    local sliderCircle = Instance.new("Frame")
    sliderCircle.Name = "Circle"
    sliderCircle.Size = UDim2.new(0, 16, 0, 16)
    sliderCircle.Position = UDim2.new((default - min) / (max - min), -8, 0.5, -8)
    sliderCircle.BackgroundColor3 = self.Colors.Text
    sliderCircle.Parent = sliderBack
    
    local sliderCircleCorner = Instance.new("UICorner")
    sliderCircleCorner.CornerRadius = UDim.new(1, 0)
    sliderCircleCorner.Parent = sliderCircle
    
    local sliderClick = Instance.new("TextButton")
    sliderClick.Name = "ClickDetector"
    sliderClick.Size = UDim2.new(1, 0, 1, 0)
    sliderClick.BackgroundTransparency = 1
    sliderClick.Text = ""
    sliderClick.Parent = sliderBack
    
    local value = default
    
    local function updateSlider(input)
        local pos = math.clamp((input.Position.X - sliderBack.AbsolutePosition.X) / sliderBack.AbsoluteSize.X, 0, 1)
        local newValue = math.floor(min + (max - min) * pos)
        
        value = newValue
        sliderLabel.Text = text .. ": " .. value
        sliderFill.Size = UDim2.new(pos, 0, 1, 0)
        sliderCircle.Position = UDim2.new(pos, -8, 0.5, -8)
        
        callback(value)
    end
    
    sliderClick.MouseButton1Down:Connect(function(input)
        updateSlider({Position = input})
        
        local connection
        connection = UserInputService.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                updateSlider(input)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                if connection then
                    connection:Disconnect()
                end
            end
        end)
    end)
    
    local slider = {
        Frame = sliderFrame,
        Value = default,
        SetValue = function(self, newValue)
            value = math.clamp(newValue, min, max)
            local pos = (value - min) / (max - min)
            
            sliderLabel.Text = text .. ": " .. value
            sliderFill.Size = UDim2.new(pos, 0, 1, 0)
            sliderCircle.Position = UDim2.new(pos, -8, 0.5, -8)
            
            callback(value)
        end
    }
    
    return slider
end

function SilverAccess:CreateDropdown(parent, text, options, callback)
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Name = text .. "Dropdown"
    dropdownFrame.Size = UDim2.new(1, 0, 0, 60)
    dropdownFrame.BackgroundTransparency = 1
    dropdownFrame.LayoutOrder = #parent:GetChildren()
    dropdownFrame.Parent = parent
    
    local dropdownLabel = Instance.new("TextLabel")
    dropdownLabel.Name = "Label"
    dropdownLabel.Size = UDim2.new(1, 0, 0, 20)
    dropdownLabel.BackgroundTransparency = 1
    dropdownLabel.TextColor3 = self.Colors.Text
    dropdownLabel.TextSize = 14
    dropdownLabel.Font = Enum.Font.Gotham
    dropdownLabel.Text = text
    dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
    dropdownLabel.Parent = dropdownFrame
    
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "Button"
    dropdownButton.Size = UDim2.new(1, 0, 0, 35)
    dropdownButton.Position = UDim2.new(0, 0, 0, 25)
    dropdownButton.BackgroundColor3 = self.Colors.Secondary
    dropdownButton.TextColor3 = self.Colors.Text
    dropdownButton.TextSize = 14
    dropdownButton.Font = Enum.Font.Gotham
    dropdownButton.Text = options[1] or "Select"
    dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
    dropdownButton.TextTruncate = Enum.TextTruncate.AtEnd
    dropdownButton.Parent = dropdownFrame
    
    local dropdownPadding = Instance.new("UIPadding")
    dropdownPadding.PaddingLeft = UDim.new(0, 10)
    dropdownPadding.Parent = dropdownButton
    
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 6)
    dropdownCorner.Parent = dropdownButton
    
    local dropdownIcon = Instance.new("ImageLabel")
    dropdownIcon.Name = "Icon"
    dropdownIcon.Size = UDim2.new(0, 20, 0, 20)
    dropdownIcon.Position = UDim2.new(1, -30, 0.5, -10)
    dropdownIcon.BackgroundTransparency = 1
    dropdownIcon.Image = "rbxassetid://6031091004"
    dropdownIcon.ImageColor3 = self.Colors.Text
    dropdownIcon.Parent = dropdownButton
    
    local dropdownList = Instance.new("Frame")
    dropdownList.Name = "List"
    dropdownList.Size = UDim2.new(1, 0, 0, 0)
    dropdownList.Position = UDim2.new(0, 0, 1, 5)
    dropdownList.BackgroundColor3 = self.Colors.Secondary
    dropdownList.BorderSizePixel = 0
    dropdownList.ClipsDescendants = true
    dropdownList.Visible = false
    dropdownList.ZIndex = 5
    dropdownList.Parent = dropdownButton
    
    local dropdownListCorner = Instance.new("UICorner")
    dropdownListCorner.CornerRadius = UDim.new(0, 6)
    dropdownListCorner.Parent = dropdownList
    
    local dropdownListLayout = Instance.new("UIListLayout")
    dropdownListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    dropdownListLayout.Parent = dropdownList
    
    local selected = options[1] or "Select"
    local isOpen = false
    
    local function updateDropdown()
        for i, option in ipairs(options) do
            local optionButton = dropdownList:FindFirstChild(option .. "Option")
            
            if not optionButton then
                optionButton = Instance.new("TextButton")
                optionButton.Name = option .. "Option"
                optionButton.Size = UDim2.new(1, 0, 0, 30)
                optionButton.BackgroundTransparency = 1
                optionButton.TextColor3 = self.Colors.Text
                optionButton.TextSize = 14
                optionButton.Font = Enum.Font.Gotham
                optionButton.Text = option
                optionButton.TextXAlignment = Enum.TextXAlignment.Left
                optionButton.LayoutOrder = i
                optionButton.ZIndex = 6
                optionButton.Parent = dropdownList
                
                local optionPadding = Instance.new("UIPadding")
                optionPadding.PaddingLeft = UDim.new(0, 10)
                optionPadding.Parent = optionButton
                
                optionButton.MouseButton1Click:Connect(function()
                    selected = option
                    dropdownButton.Text = selected
                    
                    isOpen = false
                    dropdownList.Visible = false
                    dropdownList.Size = UDim2.new(1, 0, 0, 0)
                    dropdownIcon.Rotation = 0
                    
                    callback(selected)
                end)
            end
        end
    end
    
    updateDropdown()
    
    dropdownButton.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        
        if isOpen then
            dropdownList.Visible = true
            dropdownList.Size = UDim2.new(1, 0, 0, math.min(#options * 30, 150))
            dropdownIcon.Rotation = 180
        else
            dropdownList.Visible = false
            dropdownList.Size = UDim2.new(1, 0, 0, 0)
            dropdownIcon.Rotation = 0
        end
    end)
    
    local dropdown = {
        Frame = dropdownFrame,
        Value = selected,
        UpdateOptions = function(self, newOptions)
            options = newOptions
            
            for _, child in pairs(dropdownList:GetChildren()) do
                if child:IsA("TextButton") then
                    child:Destroy()
                end
            end
            
            updateDropdown()
            
            if not table.find(options, selected) then
                selected = options[1] or "Select"
                dropdownButton.Text = selected
                callback(selected)
            end
        end,
        SetValue = function(self, value)
            if table.find(options, value) then
                selected = value
                                dropdownButton.Text = selected
                callback(selected)
            end
        end
    }
    
    return dropdown
end

function SilverAccess:CreateTextBox(parent, text, default, callback)
    local textBoxFrame = Instance.new("Frame")
    textBoxFrame.Name = text .. "TextBox"
    textBoxFrame.Size = UDim2.new(1, 0, 0, 60)
    textBoxFrame.BackgroundTransparency = 1
    textBoxFrame.LayoutOrder = #parent:GetChildren()
    textBoxFrame.Parent = parent
    
    local textBoxLabel = Instance.new("TextLabel")
    textBoxLabel.Name = "Label"
    textBoxLabel.Size = UDim2.new(1, 0, 0, 20)
    textBoxLabel.BackgroundTransparency = 1
    textBoxLabel.TextColor3 = self.Colors.Text
    textBoxLabel.TextSize = 14
    textBoxLabel.Font = Enum.Font.Gotham
    textBoxLabel.Text = text
    textBoxLabel.TextXAlignment = Enum.TextXAlignment.Left
    textBoxLabel.Parent = textBoxFrame
    
    local textBoxInput = Instance.new("TextBox")
    textBoxInput.Name = "Input"
    textBoxInput.Size = UDim2.new(1, 0, 0, 35)
    textBoxInput.Position = UDim2.new(0, 0, 0, 25)
    textBoxInput.BackgroundColor3 = self.Colors.Secondary
    textBoxInput.TextColor3 = self.Colors.Text
    textBoxInput.PlaceholderColor3 = self.Colors.Accent
    textBoxInput.PlaceholderText = "Enter " .. text:lower() .. "..."
    textBoxInput.Text = default or ""
    textBoxInput.TextSize = 14
    textBoxInput.Font = Enum.Font.Gotham
    textBoxInput.TextXAlignment = Enum.TextXAlignment.Left
    textBoxInput.ClearTextOnFocus = false
    textBoxInput.Parent = textBoxFrame
    
    local textBoxPadding = Instance.new("UIPadding")
    textBoxPadding.PaddingLeft = UDim.new(0, 10)
    textBoxPadding.Parent = textBoxInput
    
    local textBoxCorner = Instance.new("UICorner")
    textBoxCorner.CornerRadius = UDim.new(0, 6)
    textBoxCorner.Parent = textBoxInput
    
    textBoxInput.FocusLost:Connect(function(enterPressed)
        callback(textBoxInput.Text)
    end)
    
    local textBox = {
        Frame = textBoxFrame,
        Value = default or "",
        SetValue = function(self, value)
            textBoxInput.Text = value
            callback(value)
        end
    }
    
    return textBox
end

function SilverAccess:CreateLabel(parent, text)
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(1, 0, 0, 25)
    label.BackgroundTransparency = 1
    label.TextColor3 = self.Colors.Text
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.Text = text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.LayoutOrder = #parent:GetChildren()
    label.Parent = parent
    
    return label
end

function SilverAccess:ShowNotification(message, color)
    if not self.GUI then return end
    
    local notification = Instance.new("Frame")
    notification.Name = "Notification"
    notification.Size = UDim2.new(0, 250, 0, 60)
    notification.Position = UDim2.new(1, 20, 0.5, 0)
    notification.BackgroundColor3 = self.Colors.Background
    notification.BorderSizePixel = 0
    notification.Parent = self.GUI
    
    local notifCorner = Instance.new("UICorner")
    notifCorner.CornerRadius = UDim.new(0, 8)
    notifCorner.Parent = notification
    
    local notifBar = Instance.new("Frame")
    notifBar.Name = "Bar"
    notifBar.Size = UDim2.new(0, 5, 1, 0)
    notifBar.BackgroundColor3 = color or self.Colors.Primary
    notifBar.BorderSizePixel = 0
    notifBar.Parent = notification
    
    local barCorner = Instance.new("UICorner")
    barCorner.CornerRadius = UDim.new(0, 8)
    barCorner.Parent = notifBar
    
    local notifText = Instance.new("TextLabel")
    notifText.Name = "Message"
    notifText.Size = UDim2.new(1, -20, 1, 0)
    notifText.Position = UDim2.new(0, 15, 0, 0)
    notifText.BackgroundTransparency = 1
    notifText.TextColor3 = self.Colors.Text
    notifText.TextSize = 14
    notifText.Font = Enum.Font.Gotham
    notifText.Text = message
    notifText.TextWrapped = true
    notifText.TextXAlignment = Enum.TextXAlignment.Left
    notifText.Parent = notification
    
    TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(1, -270, 0.5, 0)}):Play()
    
    task.delay(3, function()
        TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(1, 20, 0.5, 0)}):Play()
        task.delay(0.6, function()
            notification:Destroy()
        end)
    end)
end

function SilverAccess:MakeDraggable(dragObject, dragTarget)
    local dragging = false
    local dragInput, mousePos, framePos
    
    dragObject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = dragTarget.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    dragObject.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            dragTarget.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
        end
    end)
end

function SilverAccess:AddFeature(name, description, setupFunction)
    if not self.Features[name] then
        self.Features[name] = {
            Name = name,
            Description = description,
            Setup = setupFunction
        }
    end
end

function SilverAccess:EnableFeature(name)
    local feature = self.Features[name]
    if feature and self.GUI then
        local featuresContainer = self.ContentFrame.FeaturesContent.FeaturesScroll.FeaturesContainer
        
        local featureSection = self:CreateSection(featuresContainer, feature.Name)
        
        local descriptionLabel = self:CreateLabel(featureSection, feature.Description)
        
        feature.Setup(self, featureSection)
    end
end

function SilverAccess:EnableAllFeatures()
    for name, _ in pairs(self.Features) do
        self:EnableFeature(name)
    end
end

return SilverAccess
