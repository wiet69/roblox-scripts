local OrionLib = {}
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local ScreenGui = Instance.new("ScreenGui")
local MainFrame = nil
local Tabs = {}

ScreenGui.Name = "SimpleUILib"
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = false

pcall(function()
    ScreenGui.Parent = CoreGui
end)

if not ScreenGui.Parent then
    ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
end

local function MakeDraggable(frame)
    local dragging, dragInput, dragStart, startPos
    
    local function Update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            Update(input)
        end
    end)
end

function OrionLib:Init(title)
    MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 500, 0, 300)
    MainFrame.Position = UDim2.new(0.5, -250, 0.5, -150)
    MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    
    MakeDraggable(MainFrame)
    
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = MainFrame
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(1, -30, 1, 0)
    Title.BackgroundTransparency = 1
    Title.Text = title or "Simple UI Library"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 16
    Title.Font = Enum.Font.SourceSansBold
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Position = UDim2.new(0, 10, 0, 0)
    Title.Parent = TitleBar
    
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Position = UDim2.new(1, -30, 0, 0)
    CloseButton.BackgroundTransparency = 1
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 16
    CloseButton.Font = Enum.Font.SourceSansBold
    CloseButton.Parent = TitleBar
    
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)
    
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.Size = UDim2.new(0, 120, 1, -30)
    TabContainer.Position = UDim2.new(0, 0, 0, 30)
    TabContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    TabContainer.BorderSizePixel = 0
    TabContainer.Parent = MainFrame
    
    local TabContentContainer = Instance.new("Frame")
    TabContentContainer.Name = "TabContentContainer"
    TabContentContainer.Size = UDim2.new(1, -120, 1, -30)
    TabContentContainer.Position = UDim2.new(0, 120, 0, 30)
    TabContentContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    TabContentContainer.BorderSizePixel = 0
    TabContentContainer.Parent = MainFrame
    
    self.MainFrame = MainFrame
    self.TabContainer = TabContainer
    self.TabContentContainer = TabContentContainer
    
    return self
end

function OrionLib:AddTab(name)
    local TabButton = Instance.new("TextButton")
    TabButton.Name = name .. "Button"
    TabButton.Size = UDim2.new(1, 0, 0, 30)
    TabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    TabButton.BorderSizePixel = 0
    TabButton.Text = name
    TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    TabButton.TextSize = 14
    TabButton.Font = Enum.Font.SourceSans
    TabButton.Parent = self.TabContainer
    
    if #Tabs > 0 then
        TabButton.Position = UDim2.new(0, 0, 0, #Tabs * 30)
    end
    
    local TabContent = Instance.new("ScrollingFrame")
    TabContent.Name = name .. "Content"
    TabContent.Size = UDim2.new(1, 0, 1, 0)
    TabContent.BackgroundTransparency = 1
    TabContent.BorderSizePixel = 0
    TabContent.ScrollBarThickness = 4
    TabContent.Visible = false
    TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
    TabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
    TabContent.Parent = self.TabContentContainer
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 5)
    UIListLayout.Parent = TabContent
    
    local UIPadding = Instance.new("UIPadding")
    UIPadding.PaddingLeft = UDim.new(0, 10)
    UIPadding.PaddingRight = UDim.new(0, 10)
    UIPadding.PaddingTop = UDim.new(0, 10)
    UIPadding.PaddingBottom = UDim.new(0, 10)
    UIPadding.Parent = TabContent
    
    local tab = {
        Name = name,
        Button = TabButton,
        Content = TabContent
    }
    
    table.insert(Tabs, tab)
    
    TabButton.MouseButton1Click:Connect(function()
        for _, t in pairs(Tabs) do
            if t.Name == name then
                t.Content.Visible = true
                t.Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                t.Button.TextColor3 = Color3.fromRGB(255, 255, 255)
            else
                t.Content.Visible = false
                t.Button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
                t.Button.TextColor3 = Color3.fromRGB(200, 200, 200)
            end
        end
    end)
    
    if #Tabs == 1 then
        TabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabContent.Visible = true
    end
    
    return {
        AddButton = function(text, callback)
            local Button = Instance.new("TextButton")
            Button.Name = text .. "Button"
            Button.Size = UDim2.new(1, 0, 0, 30)
            Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            Button.BorderSizePixel = 0
            Button.Text = text
            Button.TextColor3 = Color3.fromRGB(255, 255, 255)
            Button.TextSize = 14
            Button.Font = Enum.Font.SourceSans
            Button.Parent = TabContent
            
            Button.MouseEnter:Connect(function()
                Button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            end)
            
            Button.MouseLeave:Connect(function()
                Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            end)
            
            Button.MouseButton1Click:Connect(function()
                callback()
            end)
            
            return Button
        end,
        
        AddToggle = function(text, default, callback)
            local ToggleContainer = Instance.new("Frame")
            ToggleContainer.Name = text .. "ToggleContainer"
            ToggleContainer.Size = UDim2.new(1, 0, 0, 30)
            ToggleContainer.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            ToggleContainer.BorderSizePixel = 0
            ToggleContainer.Parent = TabContent
            
            local TextLabel = Instance.new("TextLabel")
            TextLabel.Name = "TextLabel"
            TextLabel.Size = UDim2.new(1, -50, 1, 0)
            TextLabel.Position = UDim2.new(0, 10, 0, 0)
            TextLabel.BackgroundTransparency = 1
            TextLabel.Text = text
            TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel.TextSize = 14
            TextLabel.Font = Enum.Font.SourceSans
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextLabel.Parent = ToggleContainer
            
            local ToggleButton = Instance.new("Frame")
            ToggleButton.Name = "ToggleButton"
            ToggleButton.Size = UDim2.new(0, 40, 0, 20)
            ToggleButton.Position = UDim2.new(1, -45, 0.5, -10)
            ToggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            ToggleButton.BorderSizePixel = 0
            ToggleButton.Parent = ToggleContainer
            
            local ToggleIndicator = Instance.new("Frame")
            ToggleIndicator.Name = "ToggleIndicator"
            ToggleIndicator.Size = UDim2.new(0, 16, 0, 16)
            ToggleIndicator.Position = UDim2.new(0, 2, 0.5, -8)
            ToggleIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ToggleIndicator.BorderSizePixel = 0
            ToggleIndicator.Parent = ToggleButton
            
            local enabled = default or false
            
            local function updateToggle()
                if enabled then
                    ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 120, 255)
                    ToggleIndicator.Position = UDim2.new(0, 22, 0.5, -8)
                else
                    ToggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                    ToggleIndicator.Position = UDim2.new(0, 2, 0.5, -8)
                end
                callback(enabled)
            end
            
            ToggleContainer.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    enabled = not enabled
                    updateToggle()
                end
            end)
            
            updateToggle()
            
            return {
                Set = function(value)
                    enabled = value
                    updateToggle()
                end,
                Get = function()
                    return enabled
                end
            }
        end,
        
        AddSlider = function(text, min, max, default, callback)
            local SliderContainer = Instance.new("Frame")
            SliderContainer.Name = text .. "SliderContainer"
            SliderContainer.Size = UDim2.new(1, 0, 0, 50)
            SliderContainer.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            SliderContainer.BorderSizePixel = 0
            SliderContainer.Parent = TabContent
            
            local TextLabel = Instance.new("TextLabel")
            TextLabel.Name = "TextLabel"
            TextLabel.Size = UDim2.new(1, -50, 0, 25)
            TextLabel.Position = UDim2.new(0, 10, 0, 0)
            TextLabel.BackgroundTransparency = 1
            TextLabel.Text = text
            TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel.TextSize = 14
            TextLabel.Font = Enum.Font.SourceSans
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextLabel.Parent = SliderContainer
            
            local ValueLabel = Instance.new("TextLabel")
            ValueLabel.Name = "ValueLabel"
            ValueLabel.Size = UDim2.new(0, 40, 0, 25)
            ValueLabel.Position = UDim2.new(1, -45, 0, 0)
            ValueLabel.BackgroundTransparency = 1
            ValueLabel.Text = tostring(default or min)
            ValueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            ValueLabel.TextSize = 14
            ValueLabel.Font = Enum.Font.SourceSans
            ValueLabel.Parent = SliderContainer
            
            local SliderBG = Instance.new("Frame")
            SliderBG.Name = "SliderBG"
            SliderBG.Size = UDim2.new(1, -20, 0, 10)
                        SliderBG.Position = UDim2.new(0, 10, 0, 30)
            SliderBG.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            SliderBG.BorderSizePixel = 0
            SliderBG.Parent = SliderContainer
            
            local SliderFill = Instance.new("Frame")
            SliderFill.Name = "SliderFill"
            SliderFill.Size = UDim2.new(0, 0, 1, 0)
            SliderFill.BackgroundColor3 = Color3.fromRGB(0, 120, 255)
            SliderFill.BorderSizePixel = 0
            SliderFill.Parent = SliderBG
            
            local SliderButton = Instance.new("TextButton")
            SliderButton.Name = "SliderButton"
            SliderButton.Size = UDim2.new(0, 10, 0, 20)
            SliderButton.Position = UDim2.new(0, -5, 0.5, -10)
            SliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SliderButton.BorderSizePixel = 0
            SliderButton.Text = ""
            SliderButton.Parent = SliderFill
            
            local value = default or min
            local dragging = false
            
            local function updateSlider(input)
                local sizeX = math.clamp((input.Position.X - SliderBG.AbsolutePosition.X) / SliderBG.AbsoluteSize.X, 0, 1)
                SliderFill.Size = UDim2.new(sizeX, 0, 1, 0)
                
                value = math.floor(min + ((max - min) * sizeX))
                ValueLabel.Text = tostring(value)
                callback(value)
            end
            
            SliderButton.MouseButton1Down:Connect(function()
                dragging = true
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    updateSlider(input)
                end
            end)
            
            SliderBG.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    updateSlider(input)
                    dragging = true
                end
            end)
            
            local defaultScale = (default - min) / (max - min)
            SliderFill.Size = UDim2.new(defaultScale, 0, 1, 0)
            
            return {
                Set = function(newValue)
                    value = math.clamp(newValue, min, max)
                    local scale = (value - min) / (max - min)
                    SliderFill.Size = UDim2.new(scale, 0, 1, 0)
                    ValueLabel.Text = tostring(value)
                    callback(value)
                end,
                Get = function()
                    return value
                end
            }
        end,
        
        AddDropdown = function(text, options, default, callback)
            local DropdownContainer = Instance.new("Frame")
            DropdownContainer.Name = text .. "DropdownContainer"
            DropdownContainer.Size = UDim2.new(1, 0, 0, 50)
            DropdownContainer.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            DropdownContainer.BorderSizePixel = 0
            DropdownContainer.Parent = TabContent
            
            local TextLabel = Instance.new("TextLabel")
            TextLabel.Name = "TextLabel"
            TextLabel.Size = UDim2.new(1, -10, 0, 25)
            TextLabel.Position = UDim2.new(0, 10, 0, 0)
            TextLabel.BackgroundTransparency = 1
            TextLabel.Text = text
            TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel.TextSize = 14
            TextLabel.Font = Enum.Font.SourceSans
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextLabel.Parent = DropdownContainer
            
            local DropdownButton = Instance.new("TextButton")
            DropdownButton.Name = "DropdownButton"
            DropdownButton.Size = UDim2.new(1, -20, 0, 25)
            DropdownButton.Position = UDim2.new(0, 10, 0, 25)
            DropdownButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            DropdownButton.BorderSizePixel = 0
            DropdownButton.Text = default or "Select..."
            DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            DropdownButton.TextSize = 14
            DropdownButton.Font = Enum.Font.SourceSans
            DropdownButton.Parent = DropdownContainer
            
            local DropdownMenu = Instance.new("Frame")
            DropdownMenu.Name = "DropdownMenu"
            DropdownMenu.Size = UDim2.new(1, 0, 0, 0)
            DropdownMenu.Position = UDim2.new(0, 0, 1, 0)
            DropdownMenu.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            DropdownMenu.BorderSizePixel = 0
            DropdownMenu.Visible = false
            DropdownMenu.ZIndex = 10
            DropdownMenu.Parent = DropdownButton
            
            local UIListLayout = Instance.new("UIListLayout")
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            UIListLayout.Parent = DropdownMenu
            
            local isOpen = false
            local selected = default
            
            local function toggleDropdown()
                isOpen = not isOpen
                if isOpen then
                    DropdownMenu.Visible = true
                    DropdownMenu.Size = UDim2.new(1, 0, 0, #options * 25)
                else
                    DropdownMenu.Visible = false
                    DropdownMenu.Size = UDim2.new(1, 0, 0, 0)
                end
            end
            
            DropdownButton.MouseButton1Click:Connect(toggleDropdown)
            
            for i, option in ipairs(options) do
                local OptionButton = Instance.new("TextButton")
                OptionButton.Name = option .. "Option"
                OptionButton.Size = UDim2.new(1, 0, 0, 25)
                OptionButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                OptionButton.BorderSizePixel = 0
                OptionButton.Text = option
                OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                OptionButton.TextSize = 14
                OptionButton.Font = Enum.Font.SourceSans
                OptionButton.ZIndex = 11
                OptionButton.Parent = DropdownMenu
                
                OptionButton.MouseButton1Click:Connect(function()
                    selected = option
                    DropdownButton.Text = option
                    toggleDropdown()
                    callback(option)
                end)
            end
            
            return {
                Set = function(option)
                    if table.find(options, option) then
                        selected = option
                        DropdownButton.Text = option
                        callback(option)
                    end
                end,
                Get = function()
                    return selected
                end
            }
        end,
        
        AddTextbox = function(text, placeholder, callback)
            local TextboxContainer = Instance.new("Frame")
            TextboxContainer.Name = text .. "TextboxContainer"
            TextboxContainer.Size = UDim2.new(1, 0, 0, 50)
            TextboxContainer.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            TextboxContainer.BorderSizePixel = 0
            TextboxContainer.Parent = TabContent
            
            local TextLabel = Instance.new("TextLabel")
            TextLabel.Name = "TextLabel"
            TextLabel.Size = UDim2.new(1, -10, 0, 25)
            TextLabel.Position = UDim2.new(0, 10, 0, 0)
            TextLabel.BackgroundTransparency = 1
            TextLabel.Text = text
            TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel.TextSize = 14
            TextLabel.Font = Enum.Font.SourceSans
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextLabel.Parent = TextboxContainer
            
            local Textbox = Instance.new("TextBox")
            Textbox.Name = "Textbox"
            Textbox.Size = UDim2.new(1, -20, 0, 25)
            Textbox.Position = UDim2.new(0, 10, 0, 25)
            Textbox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            Textbox.BorderSizePixel = 0
            Textbox.Text = ""
            Textbox.PlaceholderText = placeholder or "Enter text..."
            Textbox.TextColor3 = Color3.fromRGB(255, 255, 255)
            Textbox.PlaceholderColor3 = Color3.fromRGB(180, 180, 180)
            Textbox.TextSize = 14
            Textbox.Font = Enum.Font.SourceSans
            Textbox.Parent = TextboxContainer
            
            Textbox.FocusLost:Connect(function(enterPressed)
                callback(Textbox.Text, enterPressed)
            end)
            
            return {
                Set = function(newText)
                    Textbox.Text = newText
                end,
                Get = function()
                    return Textbox.Text
                end
            }
        end,
        
        AddLabel = function(text)
            local Label = Instance.new("TextLabel")
            Label.Name = text .. "Label"
            Label.Size = UDim2.new(1, 0, 0, 25)
            Label.BackgroundTransparency = 1
            Label.Text = text
            Label.TextColor3 = Color3.fromRGB(255, 255, 255)
            Label.TextSize = 14
            Label.Font = Enum.Font.SourceSansBold
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = TabContent
            
            return {
                Set = function(newText)
                    Label.Text = newText
                end
            }
        end
    }
end

function OrionLib:Notify(title, description, duration)
    local NotifyFrame = Instance.new("Frame")
    NotifyFrame.Name = "NotifyFrame"
    NotifyFrame.Size = UDim2.new(0, 250, 0, 80)
    NotifyFrame.Position = UDim2.new(1, 20, 1, -90)
    NotifyFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    NotifyFrame.BorderSizePixel = 0
    NotifyFrame.Parent = ScreenGui
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "TitleLabel"
    TitleLabel.Size = UDim2.new(1, 0, 0, 30)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = title
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.TextSize = 16
    TitleLabel.Font = Enum.Font.SourceSansBold
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Position = UDim2.new(0, 10, 0, 0)
    TitleLabel.Parent = NotifyFrame
    
    local DescriptionLabel = Instance.new("TextLabel")
    DescriptionLabel.Name = "DescriptionLabel"
    DescriptionLabel.Size = UDim2.new(1, -20, 0, 50)
    DescriptionLabel.Position = UDim2.new(0, 10, 0, 30)
    DescriptionLabel.BackgroundTransparency = 1
    DescriptionLabel.Text = description
    DescriptionLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    DescriptionLabel.TextSize = 14
    DescriptionLabel.Font = Enum.Font.SourceSans
    DescriptionLabel.TextXAlignment = Enum.TextXAlignment.Left
    DescriptionLabel.TextYAlignment = Enum.TextYAlignment.Top
    DescriptionLabel.TextWrapped = true
    DescriptionLabel.Parent = NotifyFrame
    
    NotifyFrame.Position = UDim2.new(1, 20, 1, -90)
    TweenService:Create(NotifyFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(1, -270, 1, -90)}):Play()
    
    task.delay(duration or 5, function()
        TweenService:Create(NotifyFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(1, 20, 1, -90)}):Play()
        task.wait(0.5)
        NotifyFrame:Destroy()
    end)
end

return OrionLib
